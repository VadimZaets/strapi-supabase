const { createClient } = require("@supabase/supabase-js");

module.exports = {
  init(config) {
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ
    console.log("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Supabase Storage –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞");
    console.log("üìç URL:", config.url ? "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" : "–ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û");
    console.log(
      "üîë API Key:",
      config.apiKey ? "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" : "–ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û"
    );
    console.log("ü™£ Bucket:", config.bucket);
    console.log("üìÅ Directory:", config.directory);

    if (!config.url || !config.apiKey) {
      throw new Error("‚ùå SUPABASE_URL –∞–±–æ SUPABASE_ANON_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ!");
    }

    const supabase = createClient(config.url, config.apiKey);

    return {
      async upload(file) {
        const fileName = `${config.directory || "strapi-uploads"}/${file.hash}${file.ext}`;

        console.log(`üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${file.name} ‚Üí ${fileName}`);

        try {
          // –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
          let fileData;
          if (file.buffer) {
            fileData = file.buffer;
          } else if (file.stream) {
            const chunks = [];
            for await (const chunk of file.stream) {
              chunks.push(chunk);
            }
            fileData = Buffer.concat(chunks);
          } else {
            throw new Error("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
          }

          console.log(`üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: ${fileData.length} –±–∞–π—Ç`);

          // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ Supabase Storage
          const { data, error } = await supabase.storage
            .from(config.bucket)
            .upload(fileName, fileData, {
              contentType: file.mime,
              upsert: true,
            });

          if (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase Storage:", error);
            throw new Error(
              `–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Supabase: ${error.message}`
            );
          }

          // –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL
          const { data: publicUrlData } = supabase.storage
            .from(config.bucket)
            .getPublicUrl(fileName);

          // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ URL —Ñ–∞–π–ª—É
          file.url = publicUrlData.publicUrl;
          file.provider_metadata = {
            bucket: config.bucket,
            key: fileName,
            public_url: publicUrlData.publicUrl,
          };

          console.log(`‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${file.url}`);
        } catch (error) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}:`, error);
          throw error;
        }
      },

      async uploadStream(file) {
        return this.upload(file);
      },

      async delete(file) {
        const fileName = file.provider_metadata?.key;

        if (!fileName) {
          console.warn(`‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}`);
          return;
        }

        try {
          const { error } = await supabase.storage
            .from(config.bucket)
            .remove([fileName]);

          if (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ Supabase: ${error.message}`);
          }

          console.log(
            `üóëÔ∏è –§–∞–π–ª ${file.name} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Supabase Storage`
          );
        } catch (error) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}:`, error);
          throw error;
        }
      },
    };
  },
};
